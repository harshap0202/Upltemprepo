Certainly! Here's a Jenkinsfile that uses a choice parameter to present a list of all Git branches available in the repository when running a build. To accomplish this, we'll use a combination of pipeline and Groovy script to dynamically set the choice parameter:

```groovy
pipeline {
    agent any

    parameters {
        choice(name: 'BRANCH', choices: getGitBranches(), description: 'Select the branch to build')
    }

    stages {
        stage('Checkout') {
            steps {
                script {
                    echo "Selected branch: ${params.BRANCH}"
                    // Checkout the selected branch
                    checkout([
                        $class: 'GitSCM', 
                        branches: [[name: "*/${params.BRANCH}"]],
                        userRemoteConfigs: [[url: 'https://your-git-repo-url.git']]
                    ])
                }
            }
        }
        stage('Build') {
            steps {
                echo "Building branch: ${params.BRANCH}"
                // Add your build steps here
            }
        }
    }
}

// Helper function to get git branches
def getGitBranches() {
    def branches = []
    try {
        branches = sh(script: 'git ls-remote --heads origin', returnStdout: true)
            .readLines()
            .collect { it.split()[1].replaceAll('refs/heads/', '') }
            .sort()
    } catch (Exception e) {
        echo "Error fetching branches: ${e.message}"
    }
    return branches.join('\n')
}
```

### Explanation:

1. **Parameters Block**:
   - The `parameters` block is used to define a `choice` parameter named `BRANCH`.
   - The `choices` value is dynamically set by calling the `getGitBranches()` function.

2. **Stages**:
   - **Checkout Stage**: 
     - This stage prints the selected branch and checks out the code from the selected branch using the `checkout` step.
   - **Build Stage**: 
     - This stage simply prints the branch being built, and you can add your actual build steps here.

3. **Helper Function**:
   - The `getGitBranches()` function is defined outside the `pipeline` block.
   - This function runs the `git ls-remote --heads origin` command to list all branches.
   - It processes the output to extract branch names, sorts them, and returns them as a newline-separated string.

### Notes:
- Make sure your Jenkins job is configured to use a pipeline script from SCM, and this Jenkinsfile is placed at the root of your repository.
- Replace `'https://your-git-repo-url.git'` with the actual URL of your Git repository.
- The job should be triggered manually for the first time to fetch the branches and present them as choices. After that, the branches will be available for selection during subsequent builds.

____________

Sure! Here's a more concise version of the `getGitBranches` function within the Jenkinsfile:

```groovy
pipeline {
    agent any

    parameters {
        choice(name: 'BRANCH', choices: getGitBranches(), description: 'Select the branch to build')
    }

    stages {
        stage('Checkout') {
            steps {
                script {
                    echo "Selected branch: ${params.BRANCH}"
                    // Checkout the selected branch
                    checkout([
                        $class: 'GitSCM', 
                        branches: [[name: "*/${params.BRANCH}"]],
                        userRemoteConfigs: [[url: 'https://your-git-repo-url.git']]
                    ])
                }
            }
        }
        stage('Build') {
            steps {
                echo "Building branch: ${params.BRANCH}"
                // Add your build steps here
            }
        }
    }
}

// Helper function to get git branches
def getGitBranches() {
    return sh(script: 'git ls-remote --heads origin | awk \'{print $2}\' | sed \'s|refs/heads/||\' | sort', returnStdout: true).trim().tokenize('\n')
}
```

### Explanation:

1. **Parameters Block**:
   - Defines a `choice` parameter named `BRANCH` using the `getGitBranches()` function to provide choices.

2. **Stages**:
   - **Checkout Stage**: 
     - Prints the selected branch and checks out the code from the selected branch.
   - **Build Stage**: 
     - Prints the branch being built, where actual build steps can be added.

3. **Helper Function**:
   - `getGitBranches()`:
     - Uses a single shell command to get the list of branches, process it, and return it as a newline-separated string.
     - `git ls-remote --heads origin` lists all remote branches.
     - `awk '{print $2}'` extracts the branch names.
     - `sed 's|refs/heads/||'` removes the `refs/heads/` prefix.
     - `sort` sorts the branch names.
     - `trim().tokenize('\n')` removes any leading/trailing whitespace and tokenizes the result into a list of branches.

This version of the `getGitBranches` function is more compact and still achieves the desired functionality.